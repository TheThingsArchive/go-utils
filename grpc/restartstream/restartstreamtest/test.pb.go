// Code generated by protoc-gen-gogo.
// source: test.proto
// DO NOT EDIT!

/*
Package restartstreamtest is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	Foo
	Bar
*/
package restartstreamtest

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Foo struct {
	Foo string `protobuf:"bytes,1,opt,name=foo,proto3" json:"foo,omitempty"`
}

func (m *Foo) Reset()                    { *m = Foo{} }
func (*Foo) ProtoMessage()               {}
func (*Foo) Descriptor() ([]byte, []int) { return fileDescriptorTest, []int{0} }

func (m *Foo) GetFoo() string {
	if m != nil {
		return m.Foo
	}
	return ""
}

type Bar struct {
	Bar string `protobuf:"bytes,1,opt,name=bar,proto3" json:"bar,omitempty"`
}

func (m *Bar) Reset()                    { *m = Bar{} }
func (*Bar) ProtoMessage()               {}
func (*Bar) Descriptor() ([]byte, []int) { return fileDescriptorTest, []int{1} }

func (m *Bar) GetBar() string {
	if m != nil {
		return m.Bar
	}
	return ""
}

func init() {
	proto.RegisterType((*Foo)(nil), "restartstreamtest.Foo")
	proto.RegisterType((*Bar)(nil), "restartstreamtest.Bar")
}
func (this *Foo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Foo)
	if !ok {
		that2, ok := that.(Foo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Foo != that1.Foo {
		return false
	}
	return true
}
func (this *Bar) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Bar)
	if !ok {
		that2, ok := that.(Bar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Bar != that1.Bar {
		return false
	}
	return true
}
func (this *Foo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&restartstreamtest.Foo{")
	s = append(s, "Foo: "+fmt.Sprintf("%#v", this.Foo)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Bar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&restartstreamtest.Bar{")
	s = append(s, "Bar: "+fmt.Sprintf("%#v", this.Bar)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTest(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Test service

type TestClient interface {
	Get(ctx context.Context, in *Foo, opts ...grpc.CallOption) (*Bar, error)
	Push(ctx context.Context, opts ...grpc.CallOption) (Test_PushClient, error)
	Pull(ctx context.Context, in *Foo, opts ...grpc.CallOption) (Test_PullClient, error)
	Sync(ctx context.Context, opts ...grpc.CallOption) (Test_SyncClient, error)
}

type testClient struct {
	cc *grpc.ClientConn
}

func NewTestClient(cc *grpc.ClientConn) TestClient {
	return &testClient{cc}
}

func (c *testClient) Get(ctx context.Context, in *Foo, opts ...grpc.CallOption) (*Bar, error) {
	out := new(Bar)
	err := grpc.Invoke(ctx, "/restartstreamtest.Test/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) Push(ctx context.Context, opts ...grpc.CallOption) (Test_PushClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Test_serviceDesc.Streams[0], c.cc, "/restartstreamtest.Test/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &testPushClient{stream}
	return x, nil
}

type Test_PushClient interface {
	Send(*Foo) error
	CloseAndRecv() (*Bar, error)
	grpc.ClientStream
}

type testPushClient struct {
	grpc.ClientStream
}

func (x *testPushClient) Send(m *Foo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testPushClient) CloseAndRecv() (*Bar, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Bar)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) Pull(ctx context.Context, in *Foo, opts ...grpc.CallOption) (Test_PullClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Test_serviceDesc.Streams[1], c.cc, "/restartstreamtest.Test/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &testPullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Test_PullClient interface {
	Recv() (*Bar, error)
	grpc.ClientStream
}

type testPullClient struct {
	grpc.ClientStream
}

func (x *testPullClient) Recv() (*Bar, error) {
	m := new(Bar)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) Sync(ctx context.Context, opts ...grpc.CallOption) (Test_SyncClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Test_serviceDesc.Streams[2], c.cc, "/restartstreamtest.Test/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &testSyncClient{stream}
	return x, nil
}

type Test_SyncClient interface {
	Send(*Foo) error
	Recv() (*Bar, error)
	grpc.ClientStream
}

type testSyncClient struct {
	grpc.ClientStream
}

func (x *testSyncClient) Send(m *Foo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testSyncClient) Recv() (*Bar, error) {
	m := new(Bar)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Test service

type TestServer interface {
	Get(context.Context, *Foo) (*Bar, error)
	Push(Test_PushServer) error
	Pull(*Foo, Test_PullServer) error
	Sync(Test_SyncServer) error
}

func RegisterTestServer(s *grpc.Server, srv TestServer) {
	s.RegisterService(&_Test_serviceDesc, srv)
}

func _Test_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Foo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restartstreamtest.Test/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).Get(ctx, req.(*Foo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).Push(&testPushServer{stream})
}

type Test_PushServer interface {
	SendAndClose(*Bar) error
	Recv() (*Foo, error)
	grpc.ServerStream
}

type testPushServer struct {
	grpc.ServerStream
}

func (x *testPushServer) SendAndClose(m *Bar) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testPushServer) Recv() (*Foo, error) {
	m := new(Foo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Test_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Foo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServer).Pull(m, &testPullServer{stream})
}

type Test_PullServer interface {
	Send(*Bar) error
	grpc.ServerStream
}

type testPullServer struct {
	grpc.ServerStream
}

func (x *testPullServer) Send(m *Bar) error {
	return x.ServerStream.SendMsg(m)
}

func _Test_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).Sync(&testSyncServer{stream})
}

type Test_SyncServer interface {
	Send(*Bar) error
	Recv() (*Foo, error)
	grpc.ServerStream
}

type testSyncServer struct {
	grpc.ServerStream
}

func (x *testSyncServer) Send(m *Bar) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testSyncServer) Recv() (*Foo, error) {
	m := new(Foo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Test_serviceDesc = grpc.ServiceDesc{
	ServiceName: "restartstreamtest.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Test_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Push",
			Handler:       _Test_Push_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Pull",
			Handler:       _Test_Pull_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Sync",
			Handler:       _Test_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}

func (m *Foo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Foo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Foo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTest(dAtA, i, uint64(len(m.Foo)))
		i += copy(dAtA[i:], m.Foo)
	}
	return i, nil
}

func (m *Bar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bar) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Bar) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTest(dAtA, i, uint64(len(m.Bar)))
		i += copy(dAtA[i:], m.Bar)
	}
	return i, nil
}

func encodeFixed64Test(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Test(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Foo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Foo)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	return n
}

func (m *Bar) Size() (n int) {
	var l int
	_ = l
	l = len(m.Bar)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	return n
}

func sovTest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Foo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Foo{`,
		`Foo:` + fmt.Sprintf("%v", this.Foo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Bar{`,
		`Bar:` + fmt.Sprintf("%v", this.Bar) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTest(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Foo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Foo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Foo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Foo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Foo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("test.proto", fileDescriptorTest) }

var fileDescriptorTest = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x2c, 0x4a, 0x2d, 0x2e, 0x49, 0x2c, 0x2a, 0x29,
	0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x05, 0x49, 0x28, 0x89, 0x73, 0x31, 0xbb, 0xe5, 0xe7, 0x0b, 0x09,
	0x70, 0x31, 0xa7, 0xe5, 0xe7, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x20, 0x09,
	0xa7, 0xc4, 0x22, 0x90, 0x44, 0x52, 0x62, 0x11, 0x4c, 0x22, 0x29, 0xb1, 0xc8, 0xe8, 0x2d, 0x23,
	0x17, 0x4b, 0x48, 0x6a, 0x71, 0x89, 0x90, 0x29, 0x17, 0xb3, 0x7b, 0x6a, 0x89, 0x90, 0x98, 0x1e,
	0x86, 0xa9, 0x7a, 0x6e, 0xf9, 0xf9, 0x52, 0xd8, 0xc4, 0x41, 0x26, 0x5a, 0x70, 0xb1, 0x04, 0x94,
	0x16, 0x67, 0x90, 0xaa, 0x4f, 0x83, 0x11, 0xa2, 0x33, 0x27, 0x87, 0x54, 0x9d, 0x06, 0x8c, 0x42,
	0x56, 0x5c, 0x2c, 0xc1, 0x95, 0x79, 0xc9, 0xa4, 0xdb, 0x69, 0xc0, 0xe8, 0xa4, 0x73, 0xe1, 0xa1,
	0x1c, 0xc3, 0x8d, 0x87, 0x72, 0x0c, 0x1f, 0x1e, 0xca, 0x31, 0x36, 0x3c, 0x92, 0x63, 0x5c, 0xf1,
	0x48, 0x8e, 0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x7c,
	0xf1, 0x48, 0x8e, 0xe1, 0xc3, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0x21,
	0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xee, 0x32, 0x83, 0x77, 0x01, 0x00, 0x00,
}
